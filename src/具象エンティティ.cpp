#include "共通.h"
#include "サービス・入力.h"
#include "エンティティ.h"

namespace エンジン
{

	/////////////////////////////////////////////////////
	// スプライトコンポーネント
	/////////////////////////////////////////////////////

	void スプライトコンポーネント::描画()
	{
		float2 位置 = 親_.位置取得();
		int x = static_cast<int>(位置.x + 0.5);
		int y = static_cast<int>(位置.y + 0.5);

		if (位置は中心？_) {
			システムサービス_->レンダラー取得().描画(リソースID_, x, y);
		}
		else {
			システムサービス_->レンダラー取得().描画_左上(リソースID_, x, y);
		}
	}

	/////////////////////////////////////////////////////
	// プレイヤー・エンティティ
	/////////////////////////////////////////////////////

	プレイヤー・エンティティ::プレイヤー・エンティティ()
	{
		const レンダリングサービス::情報& レンダリング情報 = システムサービス_->レンダラー取得().情報取得();
		位置設定(float2(
			レンダリング情報.画面サイズ[0] / 2,
			レンダリング情報.画面サイズ[1] * 4 / 5));

		スプライト_ = dynamic_cast<スプライトコンポーネント*>
			(コンポーネント::コンポーネント生成(L"スプライトコンポーネント", *this));
		スプライト_->リソース設定(RID_IMG_MAT04_01 + 2);
		追加(スプライト_);

		入力_ = dynamic_cast<入力コンポーネント*>(コンポーネント::コンポーネント生成(L"入力コンポーネント", *this));
		追加(入力_);

		弾丸_ = dynamic_cast<弾丸コンポーネント*>(コンポーネント::コンポーネント生成(L"弾丸コンポーネント", *this));
		追加(弾丸_);
	}

	プレイヤー・エンティティ::~プレイヤー・エンティティ()
	{

	}

	void プレイヤー・エンティティ::更新(float 経過時間)
	{
		入力データ 入力 = 入力_->データ取得();

		// 移動
		float2 位置 = 位置取得();
		float 速度 = 100.0 * 経過時間;

		if (入力.生 & 入力サービス::マスク_上) {
			位置.y -= 速度;
		}
		if (入力.生 & 入力サービス::マスク_下) {
			位置.y += 速度;
		}
		if (入力.生 & 入力サービス::マスク_左) {
			位置.x -= 速度;
		}
		if (入力.生 & 入力サービス::マスク_右) {
			位置.x += 速度;
		}
		位置設定(位置);

		// 撃つ
		if (入力.押し下げ & 入力サービス::マスク_ショット) {
			弾丸_->追加(弾丸サービス::種類::自弾, this->位置_, this->位置_);// 速度にダミーで位置を入れた
		}
	}

	void プレイヤー・エンティティ::描画()
	{
		スプライト_->描画();
	}

}// namespace エンジン
